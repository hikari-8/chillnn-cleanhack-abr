scalar AWSDate

scalar AWSDateTime

scalar AWSEmail

scalar AWSIPAddress

scalar AWSJSON

scalar AWSPhone

scalar AWSTime

scalar AWSTimestamp

scalar AWSURL

enum ErrorCode {
  chillnnTraining_401_notSignIn
  chillnnTraining_404_resourceNotFound
  chillnnTraining_500_systemError
}

type GroupMast {
  groupID: ID!
  groupName: String!
  createdAt: AWSTimestamp!
  updatedAt: AWSTimestamp!
  deletedAt: AWSTimestamp
}

type GroupMastInput {
  groupID: ID!
  groupName: String!
  createdAt: AWSTimestamp!
  updatedAt: AWSTimestamp!
  deletedAt: AWSTimestamp
}

type RaffleJoinUser {
  userID: ID!
  groupID: ID!
  joinAt: AWSTimestamp!
  deletedAt: AWSTimestamp
}

type RaffleJoinUserInput {
  userID: ID!
  groupID: ID!
  joinAt: AWSTimestamp!
  deletedAt: AWSTimestamp
}

type RaffleMast {
  taskID: ID!
  groupID: ID!
  taskName: String!
  headCount: Int
  userID: [ID!]
  updatedAt: AWSTimestamp!
  deletedAt: AWSTimestamp
}

type RaffleMastInput {
  taskID: ID!
  groupID: ID!
  taskName: String!
  userID: [ID!]
  createdAt: AWSTimestamp!
  updatedAt: AWSTimestamp!
  deletedAt: AWSTimestamp
}

type RaffleObject {
  raffleID: ID!
  tasks: [RaffleMast!]!
  groupID: ID!
  activeMembers: [RaffleJoinUser!]
  limitTime: AWSTimestamp!
  raffleStatus: RaffleStatus!
  remindSlackWeek: String!
  remindSlackTime: AWSTimestamp!
  createdAt: AWSTimestamp!
  updatedAt: AWSTimestamp!
  deletedAt: AWSTimestamp
}

type RaffleObjectInput {
  raffleID: ID!
  tasks: [RaffleMast!]!
  groupID: ID!
  activeMembers: [RaffleJoinUser!]
  limitTime: AWSTimestamp!
  raffleStatus: RaffleStatus!
  remindSlackWeek: String!
  remindSlackTime: AWSTimestamp!
  createdAt: AWSTimestamp!
  updatedAt: AWSTimestamp!
  deletedAt: AWSTimestamp
}

enum RaffleStatus {
  EFFECTIVE
  EFFECTIVE_AND_FIXED
  DONE
}

type TaskMast {
  taskID: ID!
  groupID: ID!
  placeName: String!
  headCount: Int
  createdAt: AWSTimestamp!
  updatedAt: AWSTimestamp!
  deletedAt: AWSTimestamp
}

type TaskMastInput {
  taskID: ID!
  groupID: ID!
  placeName: String!
  headCount: Int
  createdAt: AWSTimestamp!
  updatedAt: AWSTimestamp!
  deletedAt: AWSTimestamp
}

type TaskMasterObject {
  tasks: [TaskMast!]!
  groupID: ID!
  limitTime: AWSTimestamp
  remindSlackWeek: String
  remindSlackTime: AWSTimestamp
  createdAt: AWSTimestamp!
  updatedAt: AWSTimestamp!
  deletedAt: AWSTimestamp
}

type TaskMasterObjectInput {
  tasks: [TaskMast!]!
  groupID: ID!
  limitTime: AWSTimestamp
  remindSlackWeek: String
  remindSlackTime: AWSTimestamp
  createdAt: AWSTimestamp!
  updatedAt: AWSTimestamp!
  deletedAt: AWSTimestamp
}

type UserMast {
  userID: ID!
  name: String!
  groupID: String!
  role: String!
  records: [String!]
  createdAt: AWSTimestamp!
  updatedAt: AWSTimestamp!
  deletedAt: AWSTimestamp
}

input UserMastInput {
  userID: ID!
  name: String!
  groupID: String!
  role: String!
  records: [String!]
  createdAt: AWSTimestamp!
  updatedAt: AWSTimestamp!
  deletedAt: AWSTimestamp
}
