scalar AWSDate

scalar AWSDateTime

scalar AWSEmail

scalar AWSIPAddress

scalar AWSJSON

scalar AWSPhone

scalar AWSTime

scalar AWSTimestamp

scalar AWSURL

enum ErrorCode {
  chillnnTraining_401_notSignIn
  chillnnTraining_404_resourceNotFound
  chillnnTraining_500_systemError
}

type GroupMast {
  createdAt: AWSTimestamp!
  createdUserID: ID!
  deletedAt: AWSTimestamp
  groupID: ID!
  groupName: String
  updatedAt: AWSTimestamp!
}

input GroupMastInput {
  createdAt: AWSTimestamp!
  createdUserID: ID!
  deletedAt: AWSTimestamp
  groupID: ID!
  groupName: String
  updatedAt: AWSTimestamp!
}

type RaffleJoinUser {
  deletedAt: AWSTimestamp
  groupID: ID!
  joinAt: AWSTimestamp!
  userID: ID!
}

input RaffleJoinUserInput {
  deletedAt: AWSTimestamp
  groupID: ID!
  joinAt: AWSTimestamp!
  userID: ID!
}

type RaffleMast {
  createdAt: AWSTimestamp!
  deletedAt: AWSTimestamp
  groupID: ID!
  headCount: Int
  raffleID: ID!
  taskID: ID!
  taskName: String!
  updatedAt: AWSTimestamp!
  userID: [ID!]
}

input RaffleMastInput {
  createdAt: AWSTimestamp!
  deletedAt: AWSTimestamp
  groupID: ID!
  raffleID: ID!
  taskID: ID!
  taskName: String!
  updatedAt: AWSTimestamp!
  userID: [ID!]
}

type RaffleObject {
  activeMembers: [RaffleJoinUser!]
  createdAt: AWSTimestamp!
  deletedAt: AWSTimestamp
  groupID: ID!
  limitTime: AWSTimestamp!
  raffleID: ID!
  raffleStatus: RaffleStatus!
  remindSlackTime: AWSTimestamp!
  remindSlackWeek: String!
  tasks: [RaffleMast!]!
  updatedAt: AWSTimestamp!
}

input RaffleObjectInput {
  activeMembers: [RaffleJoinUserInput!]
  createdAt: AWSTimestamp!
  deletedAt: AWSTimestamp
  groupID: ID!
  limitTime: AWSTimestamp!
  raffleID: ID!
  raffleStatus: RaffleStatus!
  remindSlackTime: AWSTimestamp!
  remindSlackWeek: String!
  tasks: [RaffleMastInput!]!
  updatedAt: AWSTimestamp!
}

enum RaffleStatus {
  DONE
  EFFECTIVE
  EFFECTIVE_AND_FIXED
}

type S3Object {
  bucket: String!
  key: String!
  region: String!
  url: AWSURL!
}

input S3ObjectInput {
  bucket: String!
  key: String!
  region: String!
  url: AWSURL!
}

type TaskMast {
  createdAt: AWSTimestamp!
  deletedAt: AWSTimestamp
  groupID: ID!
  headCount: Int
  taskID: ID!
  taskName: String!
  updatedAt: AWSTimestamp!
}

input TaskMastInput {
  createdAt: AWSTimestamp!
  deletedAt: AWSTimestamp
  groupID: ID!
  headCount: Int
  taskID: ID!
  taskName: String!
  updatedAt: AWSTimestamp!
}

type TaskMasterObject {
  createdAt: AWSTimestamp!
  deletedAt: AWSTimestamp
  groupID: ID!
  limitTime: AWSTimestamp
  remindSlackTime: AWSTimestamp
  remindSlackWeek: String
  tasks: [TaskMast!]!
  updatedAt: AWSTimestamp!
}

input TaskMasterObjectInput {
  createdAt: AWSTimestamp!
  deletedAt: AWSTimestamp
  groupID: ID!
  limitTime: AWSTimestamp
  remindSlackTime: AWSTimestamp
  remindSlackWeek: String
  tasks: [TaskMastInput!]!
  updatedAt: AWSTimestamp!
}

type UserMast {
  createdAt: AWSTimestamp!
  deletedAt: AWSTimestamp
  email: String!
  groupID: String
  name: String!
  records: [String!]
  role: String!
  updatedAt: AWSTimestamp!
  userID: ID!
}

input UserMastInput {
  createdAt: AWSTimestamp!
  deletedAt: AWSTimestamp
  email: String!
  groupID: String
  name: String!
  records: [String!]
  role: String!
  updatedAt: AWSTimestamp!
  userID: ID!
}
